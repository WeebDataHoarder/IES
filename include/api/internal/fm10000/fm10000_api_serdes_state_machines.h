/* vim:ts=4:sw=4:expandtab
 * (No tabs, indent level is 4 spaces) */
/*****************************************************************************
 * File:            fm10000_api_serdes_state_machines.h
 * Creation Date:   October 30, 2013
 * Description:     Header file for the serdes-level state machine
 * 
 *                  ------------------------------------------------------
 *                  THIS FILE IS AUTO-GENERATED BY THE BUILD SYSTEM, DO
 *                  NOT MODIFY THIS FILE.  MODIFY THE FOLLOWING INSTEAD
 *                  ------------------------------------------------------
 * 
 *                  1) fm10000_api_serdes_state_machine.xml
 *                  2) templates/fm10000_api_serdes_state_machine.h
 *
 * Copyright (c) 2007 - 2015, Intel Corporation
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Intel Corporation nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

#ifndef __FM_FM10000_API_SERDES_STATE_MACHINES_H
#define __FM_FM10000_API_SERDES_STATE_MACHINES_H

/* declaration of the SerDes-level state machine types */
#define FM10000_BASIC_SERDES_STATE_MACHINE 200
#define FM10000_PCIE_SERDES_STATE_MACHINE 201
#define FM10000_STUB_SERDES_STATE_MACHINE 202


/* declaration of SerDes-level states */
typedef enum
{
    FM10000_SERDES_STATE_DISABLED = 0,
    FM10000_SERDES_STATE_CONFIGURED,
    FM10000_SERDES_STATE_WAITING_TXRX,
    FM10000_SERDES_STATE_WAITING_TX,
    FM10000_SERDES_STATE_WAITING_RX,
    FM10000_SERDES_STATE_POWERED_UP,
    FM10000_SERDES_STATE_LOOPBACK,
    FM10000_SERDES_STATE_BIST,
    FM10000_SERDES_STATE_DFE_TUNING,
    FM10000_SERDES_STATE_KR_TRAINING,
    FM10000_SERDES_STATE_KR_COMPLETE,
    FM10000_SERDES_STATE_MISSION,
    FM10000_SERDES_STATE_TX_ON,
    FM10000_SERDES_STATE_RX_ON,
    FM10000_SERDES_STATE_RX_DFE_TUNING,
    FM10000_SERDES_STATE_RX_MISSION,
    FM10000_SERDES_STATE_MAX

} fm10000_serdesSmStates;

extern fm_text fm10000SerDesStatesMap[FM10000_SERDES_STATE_MAX];


/* declaration of SerDes-level events */
typedef enum
{
    FM10000_SERDES_EVENT_POWERUP_REQ = 0,
    FM10000_SERDES_EVENT_RX_POWERUP_REQ,
    FM10000_SERDES_EVENT_TX_POWERUP_REQ,
    FM10000_SERDES_EVENT_POWERDOWN_REQ,
    FM10000_SERDES_EVENT_TX_POWERDOWN_REQ,
    FM10000_SERDES_EVENT_RX_POWERDOWN_REQ,
    FM10000_SERDES_EVENT_ENABLE_BIST_REQ,
    FM10000_SERDES_EVENT_DISABLE_BIST_REQ,
    FM10000_SERDES_EVENT_LOOPBACK_ON_REQ,
    FM10000_SERDES_EVENT_LOOPBACK_OFF_REQ,
    FM10000_SERDES_EVENT_CONFIGURE_REQ,
    FM10000_SERDES_EVENT_CONFIGURE_DFE_REQ,
    FM10000_SERDES_EVENT_DISABLE_REQ,
    FM10000_SERDES_EVENT_TIMEOUT_IND,
    FM10000_SERDES_EVENT_RXTX_PLLS_LOCKED_IND,
    FM10000_SERDES_EVENT_RX_PLL_LOCKED_IND,
    FM10000_SERDES_EVENT_TX_PLL_LOCKED_IND,
    FM10000_SERDES_EVENT_SIGNALOK_ASSERTED_IND,
    FM10000_SERDES_EVENT_SIGNALOK_DEASSERTED_IND,
    FM10000_SERDES_EVENT_DFE_TUNING_STARTED_IND,
    FM10000_SERDES_EVENT_DFE_TUNING_COMPLETE_IND,
    FM10000_SERDES_EVENT_DFE_ICAL_COMPLETE_IND,
    FM10000_SERDES_EVENT_DFE_TUNING_STOPPED_IND,
    FM10000_SERDES_EVENT_FAR_LOOPBACK_ON_REQ,
    FM10000_SERDES_EVENT_FAR_LOOPBACK_OFF_REQ,
    FM10000_SERDES_EVENT_ENABLE_EEE_MODE_REQ,
    FM10000_SERDES_EVENT_DISABLE_EEE_MODE_REQ,
    FM10000_SERDES_EVENT_VALIDATE_TIMEOUT_IND,
    FM10000_SERDES_EVENT_MAX

} fm10000_serdesSmEvents;

extern fm_text fm10000SerDesEventsMap[FM10000_SERDES_EVENT_MAX];

/* declaration of external counterparts of action callbacks */
fm_status fm10000SerDesFlagError( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSetSignalDtctForcedBadC( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSetStaticDfeSignalDtctNormal( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSetSignalDtctNormal( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesConfigureBitRateAndWidthMode( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesConfigureDataSelect( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesConfigureTxEqualization( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesConfigureOptions( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesConfigureDfeMode( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSaveDfeConfig( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSaveBitRateConfig( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSaveNearLoopbackOnConfig( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSaveNearLoopbackOffConfig( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSetFarLoopbackModeOn( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSetFarLoopbackModeOff( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesInitStateVar( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesEnableTxOutput( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesDisableTxOutput( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesEnableBistMode( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesEnableTxBistMode( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesEnableRxBistMode( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesRemoveBistConfig( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesEnableNearLoopback( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesDisableNearLoopback( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesEnableParallelLoopback( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesDisableParallelLoopback( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesInitSignalOk( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesStartTimeoutTimerShrt( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesStartTimeoutTimerLng( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesStopTimeoutTimer( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesEnableTxRx( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesDisableTxRx( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesEnableRx( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesDisableRx( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesEnableTx( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesDisableTx( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesEnableInterrupts( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesDisableInterrupts( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesStopKrTraining( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSendPortLaneReadyInd( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSendPortKrTrainingCompleteInd( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSendDfeStartTuningReq( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSendDfeStopTuningReq( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSendDfeSuspendTuningReq( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSendDfeResumeTuningReq( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSendKrStartPcalReq( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesDontSaveTransitionRecord( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSaveTransitionRecord( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesStubAction( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesStartStubPllTimer( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesStopStubPllTimer( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesStartStubSignalTimer( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesStopStubSignalTimer( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesStartStubTuningTimer( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesStopStubTuningTimer( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesStartKrDeferralTimer( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesMarkTxPllUp( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesMarkRxPllUp( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesMarkBothPllsUp( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesMarkTxPllDown( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesMarkRxPllDown( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesMarkBothPllsDown( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesDumpBitRate( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesDisableLanePolarity( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesConfigLanePolarity( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesResetSpico( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesRestoreSpico( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesEnableEeeOpMode( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesDisableEeeOpMode( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesRstSignalOkDebounce( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesConfigureEee( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesSaveKrTimeoutStats( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesExecuteErrorValidation( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesExecuteErrorValidationWithActions( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesExecutePendingErrorActions( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesStartErrorValidationTimer( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SerDesStopErrorValidationTimer( fm_smEventInfo *eventInfo, void *userInfo );



/* declaration of external counterparts of condition callbacks */
fm_status fm10000SerDesProcessSignalOkAsserted( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessSignalOkAssertedRx( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessSignalOkDeasserted( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessSignalOkDeassertedRx( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessSignalOkTimeout( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessSignalOkTimeoutRx( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessSignalNokTimeout( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessSignalNokTimeoutRx( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessDfeTuningTimeout( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessKrTrainingTimeout( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessKrTrainingSignalOk( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessRxTxPllLockEvents( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessRxTxPllLockTimeout( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessRxPllLockTimeout( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessTxPllLockTimeout( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessStubPllTimer( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessStubSignalTimer( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessStubTuningTimer( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessEnableBistMode( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessDisableBistMode( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessBistDisableLoopback( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessDfeComplete( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesProcessDfeICalComplete( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SerDesConfigureEthOrPcie( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );



/* declaration of the log callback functions, if any */
fm_status fm10000LogSerDesTransition( fm_smTransitionRecord *record );

/* declaration of registration functions for SerDes-level state machine types */
fm_status fm10000RegisterBasicSerDesStateMachine( void );
fm_status fm10000RegisterPcieSerDesStateMachine( void );
fm_status fm10000RegisterStubSerDesStateMachine( void );

#endif /* __FM_FM10000_API_SERDES_STATE_MACHINES_H */
