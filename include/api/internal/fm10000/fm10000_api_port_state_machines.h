/* vim:ts=4:sw=4:expandtab
 * (No tabs, indent level is 4 spaces) */
/*****************************************************************************
 * File:            fm10000_api_port_state_machines.h
 * Creation Date:   October 30, 2013
 * Description:     Header file for the port-level state machine
 * 
 *                  ------------------------------------------------------
 *                  THIS FILE IS AUTO-GENERATED BY THE BUILD SYSTEM, DO
 *                  NOT MODIFY THIS FILE.  MODIFY THE FOLLOWING INSTEAD
 *                  ------------------------------------------------------
 * 
 *                  1) fm10000_api_port_state_machine.xml
 *                  2) templates/fm10000_api_port_state_machine.h
 *
 * Copyright (c) 2007 - 2015, Intel Corporation
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Intel Corporation nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

#ifndef __FM_FM10000_API_PORT_STATE_MACHINES_H
#define __FM_FM10000_API_PORT_STATE_MACHINES_H


/* declaration of the port-level state machine types */
#define FM10000_AN_PORT_STATE_MACHINE 102
#define FM10000_BASIC_PORT_STATE_MACHINE 100
#define FM10000_PCIE_PORT_STATE_MACHINE 101


/* declaration of port-level states */
typedef enum
{
    FM10000_PORT_STATE_DISABLED = 0,
    FM10000_PORT_STATE_NEED_CONFIG,
    FM10000_PORT_STATE_CONFIGURED,
    FM10000_PORT_STATE_POWERING_UP,
    FM10000_PORT_STATE_DEFERRED_UP,
    FM10000_PORT_STATE_AUTONEG,
    FM10000_PORT_STATE_ADMIN_FAULT,
    FM10000_PORT_STATE_LOCAL_FAULT,
    FM10000_PORT_STATE_REMOTE_FAULT,
    FM10000_PORT_STATE_BIST,
    FM10000_PORT_STATE_DOWN,
    FM10000_PORT_STATE_UP,
    FM10000_PORT_STATE_MAX

} fm10000_portSmStates;

extern fm_text fm10000PortStatesMap[FM10000_PORT_STATE_MAX];


/* declaration of port-level events */
typedef enum
{
    FM10000_PORT_EVENT_CONFIG_REQ = 0,
    FM10000_PORT_EVENT_DISABLE_REQ,
    FM10000_PORT_EVENT_LOOPBACK_ON_REQ,
    FM10000_PORT_EVENT_LOOPBACK_OFF_REQ,
    FM10000_PORT_EVENT_ADMIN_UP_REQ,
    FM10000_PORT_EVENT_ADMIN_DOWN_REQ,
    FM10000_PORT_EVENT_ADMIN_PWRDOWN_REQ,
    FM10000_PORT_EVENT_REMOTE_FAULT_REQ,
    FM10000_PORT_EVENT_LOCAL_FAULT_REQ,
    FM10000_PORT_EVENT_BIST_REQ,
    FM10000_PORT_EVENT_CONFIGURE_DFE_REQ,
    FM10000_PORT_EVENT_REMOTE_FAULT_IND,
    FM10000_PORT_EVENT_LOCAL_FAULT_IND,
    FM10000_PORT_EVENT_LANE_DFE_COMPLETE_IND,
    FM10000_PORT_EVENT_LANE_DFE_FAILED_IND,
    FM10000_PORT_EVENT_LANE_KR_COMPLETE_IND,
    FM10000_PORT_EVENT_LANE_KR_FAILED_IND,
    FM10000_PORT_EVENT_LANE_READY_IND,
    FM10000_PORT_EVENT_LANE_NOT_READY_IND,
    FM10000_PORT_EVENT_LINK_DOWN_IND,
    FM10000_PORT_EVENT_LINK_UP_IND,
    FM10000_PORT_EVENT_DEFTIMER_EXP_IND,
    FM10000_PORT_EVENT_AN_CONFIG_REQ,
    FM10000_PORT_EVENT_AN_DISABLE_REQ,
    FM10000_PORT_EVENT_AN_COMPLETE_IND,
    FM10000_PORT_EVENT_AN_RESTARTED_IND,
    FM10000_PORT_EVENT_FABRIC_LOOPBACK_ON_REQ,
    FM10000_PORT_EVENT_FABRIC_LOOPBACK_OFF_REQ,
    FM10000_PORT_EVENT_EEE_SILENT_IND,
    FM10000_PORT_EVENT_EEE_CONFIG_REQ,
    FM10000_PORT_EVENT_MAX

} fm10000_portSmEvents;

extern fm_text fm10000PortEventsMap[FM10000_PORT_EVENT_MAX];

/* declaration of external counterparts of action callbacks */
fm_status fm10000PowerUpLane( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000PowerUpLaneRx( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000PowerUpLaneTx( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000PowerDownLane( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000PowerDownLaneRx( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000PowerDownLaneTx( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000ReleaseSchedBw( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000UpdateSchedBw( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000ConfigureLane( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000ConfigureLaneForAn73( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000NotifyApiPortUp( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000NotifyApiPortDown( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000ConfigureLoopback( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000RestoreTxFaultMode( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SetTxFaultMode( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000SetTxFaultModeToNormal( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000InitPcs( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000Init1000BaseX( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000Init10GBaseR( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000InitMlBaseR( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000InitAn73( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000WriteEplCfgA( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000WriteEplCfgB( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000WriteMac( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000EnableDrainMode( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000DisableDrainMode( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000EnablePhy( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000DisablePhy( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000EnableLinkInterrupts( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000DisableLinkInterrupts( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000ResetPortModuleState( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000EnableLoopback( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000DisableLoopback( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000EnableFabricLoopback( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000DisableFabricLoopback( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000ClearEplFifo( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000EnableBistMode( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000DisableBistMode( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000Restart100gSyncDetection( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000StartDeferralTimer( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000StopDeferralTimer( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000FlagError( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000ConfigureDfe( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000LinkPortToLanes( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000UnlinkPortFromLanes( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000UpdatePcieModeAndSpeed( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000UpdatePcieLanePolarity( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000UpdatePcieLaneReversal( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000EnablePcieInterrupts( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000DisablePcieInterrupts( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000AnStart( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000AnStop( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000ReconfigurePortForAn( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000RestoreDfe( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000ReconfigureScheduler( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000ConfigureFarLoopback( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000EnableLowPowerIdle( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000InitPepMailbox( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000EnablePepLoopback( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000DisablePepLoopback( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000NotifyEthModeChange( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000EnablePhyAutoneg( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000DisablePhyAutoneg( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000StartAnWatchDogTimer( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000StopAnWatchDogTimer( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000StartDeferredLpiTimer( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000StopDeferredLpiTimer( fm_smEventInfo *eventInfo, void *userInfo );
fm_status fm10000DeferredLpiMode( fm_smEventInfo *eventInfo, void *userInfo );



/* declaration of external counterparts of condition callbacks */
fm_status fm10000CheckLanesReady( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000ProcessDeferralTimer( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000ProcessDeferralTimerWithAn( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000ConfigureDeviceAndCheckState( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000CheckPortStatus( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000AnRestart( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000EnterNegotiatedMode( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000SetupAdminModeUp( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000ExitBistMode( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000ExitAdminFaultMode( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );
fm_status fm10000ProcessDisableFabricLoopback( fm_smEventInfo *eventInfo, void *userInfo, fm_int *nextState );



/* declaration of the log callback functions, if any */
fm_status fm10000LogPortStateTransition( fm_smTransitionRecord *record );

/* declaration of registration functions for port-level state machine types */
fm_status fm10000RegisterAnPortStateMachine( void );
fm_status fm10000RegisterBasicPortStateMachine( void );
fm_status fm10000RegisterPciePortStateMachine( void );

#endif /* __FM_FM10000_API_PORT_STATE_MACHINES_H */
